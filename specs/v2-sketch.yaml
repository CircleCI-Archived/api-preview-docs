openapi: "3.0.0"
info:
  version: 1.0.0
  title: CircleCI API v2
  license:
    name: MIT
servers:
  - url: http://circleci.com/api/v2
paths:
  /me:
    get:
      summary: Return basic user information of the owner of the requested token
      operationId: me
      responses:
        '200':
          description: A map of simple user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Me"
  /workflows/{id}:
    get:
      summary: Return summary fields of a workflow by ID
      operationId: GET workflow by ID
      parameters:
        - name: id
          in: path
          description: ID of the workflow
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: An object with workflow information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
  /workflows/{id}/jobs:
    get:
      summary: Return all the known jobs of a given workflow
      operationId: GET workflow jobs by ID
      parameters:
        - name: id
          in: path
          description: ID of the workflow
          required: true
          schema:
            type: string
            format: uuid
        - name: page_token
          in: query
          description: Page token
          schema:
            type: string
        - name: page_size
          in: query
          description: Number of jobs to return per page of results, default 50
          schema:
            type: number
            format: integer
      responses:
        '200':
          description: a paginated set of a workflow's jobs as an inverted adjacency list
          content:
            application/json:
              schema:
                type: object
                properties:
                  next_page_token:
                    type: string
                  jobs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Job"
components:
  schemas:
    Me:
      type: object
      properties:
        login:
          type: string
        name:
          type: string
        selected_email:
          type: string
        joined_at:
          type: string
          format: date-time
    Actor:
      type: object
      properties:
        login:
          type: string
        name:
          type: string
        id:
          type: string
          format: uuid
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        # add a link to the project, Pat suggested we consider link headers
    Trigger:
      type: object
      properties:
        type:
          type: string
          enum: ["webhook", "api", "schedule"]
        actor:
          $ref: "#/components/schemas/Actor"
        vcs:
          type: object
          properties:
            branch:
              type: object
              properties:
                name:
                  type: string
                default_branch:
                  type: boolean
            commit:
              type: string
    Workflow:
      type: object
      required:
        - id
        - name
        - created_at
        - project
        - trigger
        - errors
        - status
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
        stopped_at:
          type: string
          format: date-time
        pipeline_id:
          type: string
          format: uuid
        pipeline_number:
          type: number
          format: integer
        project:
          $ref: "#/components/schemas/Project"
        trigger:
          $ref: "#/components/schemas/Trigger"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
        # See https://github.com/circleci/api-service/blob/master/resources/schema.edn#L52
        status:
          type: string
          enum: ["unauthorized", "error", "not_run",
                 "running", "failing", "on_hold",
                 "canceled", "failed", "success"]
    Job:
      type: object
      required:
        - id
        - name
        - type
        - status
        - start_time
        - dependencies
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        # workflows-conductor supports
        # :build
        # :approval
        type:
          type: string
          enum: ["build", "approval"]
        # Full list of statuses from circle.model.build
        # :retried
        # :canceled
        # :infrastructure_fail
        # :timedout
        # :not_run
        # :running
        # :failed
        # :queued
        # :scheduled
        # :not_running
        # :no_tests
        # :fixed
        # :success
        status:
          type: string
          enum: ["not_run", "queued", "not_running", "running",
                 "canceled", "infrastructure_fail", "retried",
                 "timedout", "failed", "success"]
        start_time:
          type: string
          format: date-time
        # NB stop_time is not required
        stop_time:
          type: string
          format: date-time
        dependencies:
          type: array
          items:
            type: string
            format: uuid
    Error:
      required:
        - message
      properties:
        message:
          type: string
