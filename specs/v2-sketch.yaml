openapi: "3.0.0"
info:
  version: 1.0.0
  title: CircleCI API v2
  license:
    name: MIT
servers:
  - url: https://circleci.com/api/v2
security:
  - api_key_query: []
  - api_key_header: []
  - basic_auth: []
paths:
  /me:
    get:
      summary: Return basic user information of the owner of the requested token
      operationId: me
      responses:
        '200':
          description: A map of simple user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Me"
  /project/{project_slug}:
    get:
      summary: Get a project
      operationId: getProjectBySlug
      parameters:
        - $ref: "#/components/parameters/ProjectSlug"
      responses:
        '200':
          description: A project object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /project/{project_slug}/pipeline:
    post:
      summary: Trigger a new pipeline for a project
      operationId: triggerNewPipeline
      parameters:
        - $ref: "#/components/parameters/ProjectSlug"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TriggerPipelineRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerPipelineRequest"
      responses:
        '202':
          description: Newly created pipeline data
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - number
                  - state
                  - created_at
                additionalProperties: false
                properties:
                  id:
                    type: string
                    format: uuid
                  number:
                    type: number
                    format: integer
                  state:
                    type: string
                    enum: ["pending", "created", "errored"]
                  created_at:
                    type: string
                    format: date-time
          links:
            TriggeredPipeline:
              operationId: getPipelineById
              parameters:
                id: "$response.body#/pipeline_id"
  /pipeline/{id}:
    get:
      summary: Return a pipeline by ID
      operationId: getPipelineById
      parameters:
        - name: id
          in: path
          description: ID of the pipeline
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A pipeline object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
          links:
            ProjectFromPipeline:
              operationId: getProjectById
              parameters:
                project_slug: "$response.body#/project_slug"
  /pipeline/{id}/config:
    get:
      summary: Return a pipeline's configuration
      operationId: getPipelineConfigById
      parameters:
        - name: id
          in: path
          description: ID of the pipeline
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The pipeline's configuration strings
          content:
            application/json:
              schema:
                type: object
                required:
                  - source
                  - compiled
                properties:
                  source:
                    description: |
                      The source config for the pipeline, before any config
                      compilation has been performed. If there is no config
                      this field will be empty.
                    type: string
                  compiled:
                    description: |
                      The compiled config for the pipeline, after all orb
                      expansion has been performed. If there were errors
                      processing the pipeline's configuration this field may be
                      empty.
                    type: string
  /workflow/{id}:
    get:
      summary: Return summary fields of a workflow by ID
      operationId: getWorkflowById
      parameters:
        - name: id
          in: path
          description: ID of the workflow
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: An object with workflow information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
          links:
            ProjectFromGetWorkflow:
              operationId: getProjectById
              parameters:
                project_slug: "$response.body#/project_slug"
            WorkflowJobs:
              operationId: getWorkflowJobsById
              parameters:
                id: "$response.body#/id"
  /workflow/{id}/jobs:
    get:
      summary: Return all the known jobs of a given workflow
      operationId: getWorkflowJobsById
      parameters:
        - name: id
          in: path
          description: ID of the workflow
          required: true
          schema:
            type: string
            format: uuid
        - name: page_token
          in: query
          description: Page token
          schema:
            type: string
        - name: page_size
          in: query
          description: Number of jobs to return per page of results. This parameter may not be exposed initially.
          schema:
            type: number
            format: integer
            minimum: 10
            maximum: 50
      responses:
        '200':
          description: a paginated set of a workflow's jobs as an inverted adjacency list
          content:
            application/json:
              schema:
                type: object
                properties:
                  next_page_token:
                    type: string
                  jobs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Job"
          links:
            NextWorkflowJobPage:
              operationId: getWorkflowJobsById
              parameters:
                id: "$request.query.id"
                page_token: "$response.body#/next_page_token"
components:
  securitySchemes:
    api_key_query:
      type: "apiKey"
      name: "circle-token"
      in: "query"
    api_key_header:
      type: "apiKey"
      name: "Circle-Token"
      in: "header"
    basic_auth:
      description: "HTTP basic authentication. The username should be set as the circle-token value, and the password should be left blank."
      type: "http"
      scheme: "basic"
  parameters:
    ProjectSlug:
      name: project_slug
      in: path
      description: |
        Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
      required: true
      schema:
        type: string
        example: "gh/CircleCI-Public/api-preview-docs"
      allowReserved: true
  schemas:
    Me:
      # minimise breaking changes from /api/v1.1/me
      # See https://github.com/circleci/circle/blob/gordon/disable-build-archive/src/circle/model/user.clj#L755-L765
      type: object
      properties:
        login:
          type: string
        created_at:
          type: string
          format: date-time
        name:
          type: string
        basic_email_prefs:
          type: string
          enum: ["all", "smart", "none"]
          # This is literally a map of vcs_url to {"on_dashboard": boolean, "emails": "default"}
        projects:
          type: object
          example: {"https://github.com/username/my_project": {"on_dashboard": true, "emails": "smart"}}
          additionalProperties:
            type: object
            properties:
              on_dashboard:
                type: boolean
              emails:
                type: string
                enum: ["all", "smart", "none", "default"]
        organization-prefs:
          type: object
          example: {"github": {"username": {"email": "username@example.com"}}}
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              properties:
                email:
                  type: string
        sign_in_count:
          type: number
          format: integer
        first_vcs_authorized_client_id:
          type: string
          deprecated: true
        in_beta_program:
          type: boolean
        enrolled_betas:
          type: array
          items:
            type: string
        id:
          type: string
          format: uuid
          description: User's CircleCI ID
        privacy_optout:
          type: boolean
          description: Opt out of analytics trackers
        containers:
          type: number
          format: integer
        num_projects_followed:
          type: number
          format: integer
        days_left_in_trial:
          type: number
          format: integer
        all_emails:
          type: array
          example: ["username@example.com"]
          items:
            type: string
        selected_email:
          type: string
          example: "username@example.com"
        avatar_url:
          type: string
          example: "https://avatars.example.com/369ea08d7172bfc72207e2ae1c1b17ef"
        identities:
          type: object
          additionalProperties:
            type: object
            required:
              - is_authorized
              - domain
              - external_id
              - id
              - provider_id
              - type
            properties:
              avatar_url:
                type: string
                example: "https://avatars.example.com/369ea08d7172bfc72207e2ae1c1b17ef"
              external_id:
                anyOf:
                  - type: string
                  - type: number
                example: 1234567
              id:
                anyOf:
                  - type: string
                  - type: number
                example: 1234567
              name:
                type: string
                example: "User Name"
              is_user:
                type: boolean
              domain:
                type: string
                example: "github.com"
              type:
                type: string
                example: "github"
              is_authorized:
                type: boolean
              provider_id:
                type: string
                format: uuid
              login:
                type: string
                example: "username"
              student:
                type: boolean
                default: false
    VcsInfo:
      description: "Information about the VCS that hosts the project source code."
      type: object
      required:
        - vcs_url
        - provider
        - default_branch
      properties:
        vcs_url:
          description: URL to the repository hosting the project's code
          type: string
          example: "https://github.com/CircleCI-Public/api-preview-docs"
        provider:
          description: The VCS provider
          type: string
          enum: ["GitHub", "Bitbucket"]
        default_branch:
          type: string
          example: "master"
    Project:
      description: "NOTE: The definition of Project is subject to change."
      type: object
      required:
        - slug
        - name
        - organization_name
      properties:
        slug:
          description: Project slug in the form `vcs-slug/org-name/repo-name`
          type: string
          example: "bb/CircleCI-Public/api-preview-docs"
        name:
          description: The name of the project
          type: string
          example: "api-preview-docs"
        organization_name:
          description: The name of the organization the project belongs to
          type: string
          example: "CircleCI-Public"
        vcs_info:
          $ref: "#/components/schemas/VcsInfo"
        last_job_finish_time:
          type: string
          format: date-time
    TriggerPipelineRequest:
      type: object
      additionalProperties: false
      properties:
        branch:
          description: The branch to run the new pipeline on. The HEAD commit on this branch will be used for the triggered pipeline.
          type: string
          example: "feature/design-new-api"
        tag:
          description: A tag identifying the revision of the code that the new pipeline is to run. Note that `tag` cannot be specified with `branch`.
          type: string
          example: "v3.1.4159"
        parameters:
          description: A JSON object containing pipeline-wide parameters.
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: integer
              - type: boolean
          default: {}
          example: {"foo": "bar", "baz": true}
    Pipeline:
      description: "NOTE: The definition of Pipeline is subject to change."
      type: object
      required:
        - id
        - number
        - organization_id
        - project_slug
        - created_at
        - idempotency_key
        - errors
        - workflows
      properties:
        id:
          type: string
          format: uuid
        number:
          type: number
          format: integer
        project_slug:
          type: string
        created_at:
          type: string
          format: date-time
        trigger:
          $ref: "#/components/schemas/TriggerSummary"
        vcs:
          description: VCS information for the pipeline
          type: object
          required:
            - provider_name
            - origin_repository_url
            - target_repository_url
            - revision
          properties:
            provider_name:
              description: Name of the VCS provider
              type: string
              example: GitHub
            origin_repository_url:
              description: |
                URL for the repository the trigger originated from. For fork-PR
                pipelines this is the URL to the fork, for other pipelines the
                `origin_` and `target_repository_url`s will be the same.
              type: string
              example: "https://github.com/CircleCI-Public/api-preview-docs"
            target_repository_url:
              description: |
                URL for the repository the trigger targets (i.e. the repository
                the PR will be merged into). For fork-PR pipelines this is the
                URL to the parent repo, for other pipelines the `origin_` and
                `target_repository_url`s will be the same.
              type: string
              example: "https://github.com/CircleCI-Public/api-preview-docs"
            branch:
              description: |
                The branch the pipeline ran on. The HEAD commit on this branch
                was used for the pipeline. `branch` and `tag` are mutually
                exclusive.
              type: string
              example: "feature/design-new-api"
            tag:
              description: |
                The tag the pipeline ran. The commit that this tag points to
                was used for the pipeline. `branch` and `tag` are mutually
                exclusive.
              type: string
              example: "v3.1.4159"
            revision:
              description: The revision of code that the pipeline ran.
              type: string
              example: f454a02b5d10fcccfd7d9dd7608a76d6493a98b4
        idempotency_key:
          type: string
        #actor:
        updated_at:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: ["config", "plan"]
        workflows:
          description: |
            List of Workflow IDs for all Workflows of this Pipeline. (NOTE: This
            is limited to 50 items.)
          type: object
          properties:
            total_count:
              type: integer
            ids:
              type: array
              items:
                type: string
        state:
          type: string
          enum: ["pending", "created", "blocked", "on_hold",
                 "running", "canceled", "successful", "failed",
                 "errored"]
    Workflow:
      type: object
      required:
        - id
        - name
        - created_at
        - project
        - status
      properties:
        id:
          description: the workflow's unique ID.
          type: string
          format: uuid
        name:
          description: the name of the workflow, as set in `.circleci/config.yml`
          type: string
        created_at:
          description: when the workflow was created.
          type: string
          format: date-time
        stopped_at:
          description: when the workflow finished running, failures of jobs can mean that the workflow stops without running all jobs.
          type: string
          format: date-time
          nullable: true
        # No pipeline entity here. Avoid cycles in the graph
        pipeline_id:
          description: the unique ID for the pipeline that this workflow belongs to.
          type: string
          format: uuid
        pipeline_number:
          description: the project-specific pipeline number for the pipeline that this workflow belongs to.
          type: number
          format: integer
        project_slug:
          description: "NOTE: linking workflows to projects is subject to change. The project that this workflow belongs to"
          type: string
        # See https://github.com/circleci/api-service/blob/master/resources/schema.edn#L52
        status:
          type: string
          enum: ["unauthorized", "error", "not_run",
                 "running", "failing", "on_hold",
                 "canceled", "failed", "success"]
    Job:
      type: object
      required:
        - id
        - name
        - type
        - status
        - start_time
        - dependencies
      properties:
        id:
          description: the job's unique ID.
          type: string
          format: uuid
        name:
          description: the name of the job in the workflow, this may be synthesized when using job definitions from orbs.
          type: string
        # workflows-conductor supports
        # :build
        # :approval
        type:
          type: string
          enum: ["build", "approval"]
        # Full list of statuses from circle.model.build
        # :retried
        # :canceled
        # :infrastructure_fail
        # :timedout
        # :not_run
        # :running
        # :failed
        # :queued
        # :scheduled
        # :not_running
        # :no_tests
        # :fixed
        # :success
        status:
          description: the job's current status.
          type: string
          enum: ["unauthorized", "not_run", "queued",
                 "not_running", "running", "canceled",
                 "infrastructure_fail", "timedout",
                 "failed", "success", "unknown"]
        job_number:
          description: the job's number, corresponds to the `CIRCLE_BUILD_NUM` environment variable.
          type: number
          format: integer
        start_time:
          description: when the job started.
          type: string
          format: date-time
        stop_time:
          description: when the job finished.
          type: string
          format: date-time
        dependencies:
          description: a list of the unique job IDs for the jobs that this job depends upon in the workflow.
          type: array
          items:
            type: string
            format: uuid
        project_slug:
          description: slug of the job's project in the form `vcs-slug/org-name/repo-name`, eg. `github/torvalds/linux`.
          type: string
    TriggerSummary:
      type: object
      required:
        - type
        - received_at
      properties:
        type:
          description: The type of the trigger
          type: string
          enum: ["explicit", "webhook"]
        received_at:
          description: The timestamp that the trigger was received at.
          type: string
          format: date-time
